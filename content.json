{"meta":{"title":"我的博客","subtitle":null,"description":null,"author":"裘继超","url":"http://myappol.cn"},"pages":[{"title":"categories","date":"2016-12-15T03:08:16.000Z","updated":"2016-12-15T03:08:39.000Z","comments":false,"path":"categories/index.html","permalink":"http://myappol.cn/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-12-12T08:51:14.000Z","updated":"2016-12-15T02:30:58.000Z","comments":true,"path":"tags/index.html","permalink":"http://myappol.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"组件使用说明","slug":"组件使用说明","date":"2017-03-29T02:28:30.000Z","updated":"2017-03-29T02:28:49.000Z","comments":true,"path":"2017/03/29/组件使用说明/","link":"","permalink":"http://myappol.cn/2017/03/29/组件使用说明/","excerpt":"","text":"##组件使用说明 ###页面布局 最大div&lt;div class=&quot;PagesWrap&quot;&gt; 左右两部分左: &lt;div class=&quot;ContentLeft AllTitleP&quot;&gt;右： &lt;div class=&quot;ContentRight AllTitleP&quot;&gt;注：右边顶部不是tab标签的情况下这样设置 左边部分标题 例：&lt;p class=&quot;zddxfjjg&quot;&gt;诊断对象分解结构&lt;/p&gt;标题下面部分 &lt;div class=&quot;ContentPadding ContentPaddingLeft&quot;&gt; 右边部分标题和右边一致标题下面部分&lt;div class=&quot;ContentPadding ContentPaddingRight&quot;&gt; 按钮每个按钮控件都要用&lt;div class=&quot;BtnWrap&quot;&gt;包裹 ###搜索框+右侧有按钮12345678910例：&lt;div class=&quot;SearchWrap&quot;&gt; &lt;div class=&quot;SearchCondition&quot;&gt; //左侧搜索框 &lt;input class=&quot;SearchKeyWord&quot; type=&quot;text&quot; placeholder=&quot;请输入关键字&quot; /&gt; &lt;button class=&quot;DoSearch&quot; type=&quot;button&quot;&gt;&amp;nbsp;&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;BtnWrap&quot;&gt; //右侧按钮 &lt;button class=&quot;BtnBg addbtn&quot; type=&quot;button&quot; data-toggle=&quot;tooltip&quot; title=&quot;添加数据对象&quot;&gt;&amp;nbsp;&lt;/button&gt; &lt;/div&gt;&lt;/div&gt; ###当前位置+右侧按钮12345678例：&lt;div class=&quot;SearchWrap&quot;&gt; &lt;p class=&quot;bytePointer&quot;&gt;当前位置：系统分类&amp;gt;设备分类&amp;gt;压缩机&lt;/p&gt; &lt;!-- 带背景图的按钮--&gt; &lt;div class=&quot;BtnWrap&quot;&gt; &lt;button class=&quot;BtnBg addbtn&quot; type=&quot;button&quot; data-toggle=&quot;tooltip&quot; title=&quot;添加数据对象&quot;&gt;&amp;nbsp;&lt;/button&gt; &lt;/div&gt;&lt;/div&gt; ###普通按钮 按钮颜色：蓝色设置class为Blue，白色设置class为White1234例：&lt;div class=&quot;BtnWrap&quot;&gt; &lt;button id=&quot;NewAdd&quot; class=&quot;BtnWord Blue&quot; type=&quot;button&quot;&gt;新增&lt;/button&gt;&lt;/div&gt; ###tab切换外层div&lt;div class=&quot;TabMenu AllTitleP&quot;&gt;标签页123456&lt;ul class=&quot;TabLists&quot;&gt; &lt;li id=&quot;tabFirst&quot; class=&quot;tabLi tabON&quot;&gt; &lt;i class=&quot;tabIRight&quot;&gt;&lt;/i&gt; &lt;span&gt;实体诊断对象关联&lt;/span&gt; &lt;/li&gt;&lt;/ul&gt; 标签内容页123456例：&lt;div class=&quot;TabContent ContentPaddingRight&quot;&gt; &lt;div class=&quot;TabCon TabContent1&quot;&gt;实体诊断对象关联&lt;/div&gt; &lt;div class=&quot;TabCon TabContent2&quot;&gt;实体测点关联&lt;/div&gt; &lt;div class=&quot;TabCon TabContent3&quot;&gt;首页&lt;/div&gt;&lt;/div&gt; 标签内容页中标题部分有虚线下边框123456例：&lt;div class=&quot;TitleDashed&quot;&gt; //有虚线下边框的标题栏 &lt;div class=&quot;TitleDash&quot;&gt; &lt;p class=&quot;zddxglstdx&quot;&gt;诊断对象关联实体对象&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; ###下拉框外层div&lt;div class=&quot;dropdownList&quot;&gt; 12345例：&lt;div class=&quot;locationName list&quot;&gt; &lt;span class=&quot;listText&quot;&gt;位置名称：&lt;/span&gt; &lt;div class=&quot;listContent&quot;&gt;&lt;/div&gt;&lt;/div&gt; 如果该下拉框为只读，则多引入一个类 &quot;entityType&quot; ###表格1234基本引入&lt;div class=&quot;tableBox no_scrollTable&quot;&gt; &lt;table id=&quot;table1&quot;&gt;&lt;/table&gt;&lt;/div&gt; 类”no_scrollTable”设置为没有滚动条如果需要添加分页，需要在table标签下添加123456789101112&lt;div id=&quot;tablePage8&quot; class=&quot;tablePage&quot;&gt; &lt;a&gt;首页&lt;/a&gt; &lt;a&gt;上一页&lt;/a&gt; &lt;a&gt;下一页&lt;/a&gt; &lt;a&gt;尾页&lt;/a&gt; &lt;span&gt;跳转至&lt;/span&gt; &lt;input type=&quot;text&quot; value=&quot;1&quot;/&gt; &lt;sapn&gt;页&lt;/sapn&gt; &lt;sapn&gt;共&lt;/sapn&gt; &lt;sapn class=&quot;totalPage&quot;&gt;2&lt;/sapn&gt; &lt;sapn&gt;页&lt;/sapn&gt;&lt;/div&gt; ###树形结构12例:&lt;ul id=&quot;treeDemo&quot; class=&quot;ztree showIcon&quot;&gt;&lt;/ul&gt;","categories":[{"name":"随笔","slug":"随笔","permalink":"http://myappol.cn/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://myappol.cn/tags/随笔/"}]},{"title":"es6语法特性","slug":"es6语法特性","date":"2016-12-13T07:56:53.000Z","updated":"2016-12-15T05:37:29.000Z","comments":true,"path":"2016/12/13/es6语法特性/","link":"","permalink":"http://myappol.cn/2016/12/13/es6语法特性/","excerpt":"","text":"1. let、const和block 作用域var a = 2; { let a = 3; console.log(a); //3 } console.log(a); //2 同样在块级作用域有效的另一个变量声明方式是 const,它可以声明一个常量。ES6中，const声明的常量类似于指针，它指向某个引用，也就是说这个［常量］ 并非一成不变的，如： { const ARR = [5,6]; ARR.push(7); console.log(ARR); //[5,6,7] ARR = 10; //TypeError } 有几个点需要注意： let 关键词声明的变量不具备变量提升（hoisting）特性 let 和 const 声明只在最靠近的一个块中(花括号内)有效 当使用常量const 声明时，请使用大写变量，如： CAPITAL_CASING const 在声明时必须被赋值 2.箭头函数ES6中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 =&gt; ，紧接着是函数体： var getPrice = function(){ return 4.56; }; var getPrice = ()=&gt; 4.56; 需要注意的是，上面例子中的getPrice 箭头函数采用了简洁函数体，它不需要return语句，下面这个例子使用的是正常函数体 let arr =[‘apple’,’bannar’,’orange’]; let breakfast = arr.map(fruit=&gt;{ return fruit + &apos;s&apos;; }) console.log(breakfast) //apples bananas oranges 当然，箭头函数不仅仅是让代码变的简洁，函数中this总是绑定指向对象自身，如： function Person(){ this.age = 0; } setInterval(function growUp(){ //在非严格模式下，growUp()函数的this指向window对象 this.age++; },1000); var person = new Person(); 我们经常需要使用一个变量来保存this，然后在growUp函数中引用： function Person(){ var self = this; self.age = 0; setInterval(function growUp(){ self.age++; },1000) } 而使用箭头函数可以省去这个麻烦： function Person(){ this.age = 0; setInterval( () =&gt; { this.age++; },1000); } var person = new Person(); 3.函数参数默认值ES6中允许你对函数参数设置默认值： let getFinalPrice = (price,tax=0.7) =&gt; price + price * tax; getFinalPrice(500); //850 4.Spread / Rest 操作符Spread / Rest 操作符指的是 ...,具体是 Spread 还是 Rest 需要看上下文语境。当被用于迭代器中时，它是一个Spread操作符： function foo(x,y,z) { console.log(x,y,z); } let arr = [1,2,3]; foo(…arr); //1 2 3 当被用于函数传参时，是一个Rest操作符： function foo(…args){ console.log(args); } foo(1,2,3,4,5); //[1,2,3,4,5] 5. 对象词法扩展ES6允许声明在对象字面量时使用简写语法，来初始化属性变量和函数的定义方法，并且允许在对象属性中进行计算操作： function getCar(make,model,value){ return { //简写变量 make, //等同于 make:make model, //等同于 model:model value, //等同于 value:value //属性可以使用表达式计算 [&apos;make&apos; + make]: true, //忽略 `function` 关键词简写对象函数 depreciate(){ this.value -= 2500; } } } let car = getCar(&apos;Barret&apos;,&apos;Lee&apos;,40000); // output: { // make: &apos;Barret&apos;, // model:&apos;Lee&apos;, // value: 40000, // makeBarret: true, // depreciate: function() // } 6.二进制和八进制字面量ES6支持二进制和八进制的字面量，通过在数字前面添加0o或者0O即可将其转化为二进制： let oValue = 0o10; console.log(oValue); //8 let bValue = 0b10; //二进制使用 `0b` 或者 `0B` console.log(bValue); //2 7.对象和数组结构结构可以避免在对象赋值时产生中间变量： function foo(){ return [1,2,3]; } let arr = foo(); //1 2 3 let [a,b,c] = foo(); console.log(a,b,c); //1 2 3 function bar(){ return{ x:4, y:5, z:6 }; } let {x:x,y:y,z:z} = bar(); console.log(x,y,z); //4 5 6 8.对象超类ES6允许在对象中使用super方法： var parent = { foo(){ console.log(&apos;Hello from the Parent&apos;); } } var child = { foo(){ super.foo(); console.log(&apos;Hello from the Child&apos;); } } Object.setPrototypeOf(child,parent) child.foo(); // Hello from the Parent // Hello from the Child 9.模版语法和分隔符ES6中有一种十分简洁的方法组装一堆字符串和变量。 ${ … }用来渲染一个变量 `作为分隔符 `let user = &apos;Barret&apos;; console.log(&apos;Hi ${user}!&apos;); //Hi Barret! 10. for…of VS for…infor…of 用于遍历一个迭代器，如数组： let nicknames = [&apos;di&apos;,&apos;boo&apos;,&apos;punkeye&apos;]; nicknames.size = 3; for(let nickname of nicknames){ console.log(nickname); } Result: di,boo,punkeye for…in 用来遍历对象中的属性： let nicknames ={‘di’,’boo’,’punkeye’};nicknames.size =3;for(let nickname in nicknames){ console.log(nickname);} Result: 0, 1, 2, size 11. Map 和 WeakMapES6 中两种新的数据结构集： Map 和 WeakMap。事实上每个对象都可以看作是一个Map。一个对象由多个 key-val 对构成，在 Map 中，任何类型都可以作为对象的key，如： var myMap = new Map(); var keyString = &quot;a string&quot;, keyObj = {}, keyFunc = function(){}; //设置值 myMap.set(keyString,&quot;value 与 ‘a string’ 关联&quot;); myMap.set(keyObj, &quot;value 与 keyObj 关联&quot;); myMap.set(keyFunc, &quot;value 与 keyFunc 关联&quot;); myMap.size; // 3 // 获取值 myMap.get(keyString); // &quot;value 与 &apos;a string&apos; 关联&quot; myMap.get(keyObj); // &quot;value 与 keyObj 关联&quot; myMap.get(keyFunc); // &quot;value 与 keyFunc 关联&quot; WeakMap 就是一个 Map，只不过它的所有 key 都是弱引用，意思就是 WeakMap 中的东西垃圾回收时不考虑，使用它不用担心内存泄漏问题。 另一个需要注意的点是，WeakMap 的所有 key 必须是对象。它只有四个方法 delete(key),has(key),get(key) 和 set(key, val)： let w= new WeakMap(); w.set(‘a’,’b’); var o1 = {}, o2 = function(){}, o3 = window; w.set(o1,37); w.set(o2,&quot;azerty&quot;); w.set(o3,undefined); w.get(o3) //undefined, because that is the set value w.has(o1); //true w.delete(o1); w.has(o1); //false 12. Set 和 WeakSetSet 对象是一组不重复的值，重复的值将被忽略，值类型可以是原始类型和引用类型： let mySet = new Set([1, 1, 2, 2, 3, 3]); mySet.size; // 3 mySet.has(1); // true mySet.add(‘strings’); mySet.add({ a: 1, b:2 }); 可以通过 forEach 和 for…of 来遍历 Set 对象： mySet.forEach((item) =&gt; { console.log(item); // 1 // 2 // 3 // &apos;strings&apos; // Object { a: 1, b: 2 } }); for (let value of mySet) { console.log(value); // 1 // 2 // 3 // &apos;strings&apos; // Object { a: 1, b: 2 } } Set 同样有 delete() 和 clear() 方法。 WeakSet类似于 WeakMap，WeakSet 对象可以让你在一个集合中保存对象的弱引用，在 WeakSet 中的对象只允许出现一次： var ws = new WeakSet(); var obj = {}; var foo = {}; ws.add(window); ws.add(obj); ws.add(foo); ws.has(window); // true ws.has(foo); // false, foo 没有添加成功 ws.delete(window); // 从结合中删除 window 对象 ws.has(window); // false, window 对象已经被删除 13. 类ES6 中有 class 语法。值得注意是，这里的 class 不是新的对象继承模型，它只是原型链的语法糖表现形式。函数中使用 static 关键词定义构造函数的的方法和属性： class Task { constructor() { console.log(“task instantiated!”); } showId() { console.log(23); } static loadAll() { console.log(&quot;Loading all tasks..&quot;); } } console.log(typeof Task); // function let task = new Task(); // &quot;task instantiated!&quot; task.showId(); // 23 Task.loadAll(); // &quot;Loading all tasks..&quot; 类中的继承和超集： class Car { constructor() { console.log(&quot;Creating a new car&quot;); } } class Porsche extends Car { constructor() { super(); console.log(&quot;Creating Porsche&quot;); } } let c = new Porsche(); // Creating a new car // Creating Porsche extends 允许一个子类继承父类，需要注意的是，子类的 constructor 函数中需要执行 super() 函数。 当然，你也可以在子类方法中调用父类的方法，如 super.parentMethodName()。 在 这里 阅读更多关于类的介绍。 有几点值得注意的是： 类的声明不会提升（hoisting)，如果你要使用某个 Class，那你必须在使用之前定义它，否则会抛出一个 ReferenceError 的错误在类中定义函数不需要使用 function 关键词 14. SymbolSymbol 是一种新的数据类型，它的值是唯一的，不可变的。ES6 中提出 symbol 的目的是为了生成一个唯一的标识符，不过你访问不到这个标识符： var sym = Symbol( &quot;some optional description&quot; ); console.log(typeof sym); // symbol 注意，这里 Symbol 前面不能使用 new 操作符。 如果它被用作一个对象的属性，那么这个属性会是不可枚举的： var o = { val: 10, [ Symbol(“random”) ]: “I’m a symbol”, }; console.log(Object.getOwnPropertyNames(o)); // val 如果要获取对象 symbol 属性，需要使用 Object.getOwnPropertySymbols(o)。 15. 迭代器（Iterators）迭代器允许每次访问数据集合的一个元素，当指针指向数据集合最后一个元素时，迭代器便会退出。它提供了next()函数来遍历一个序列，这个方法返回一个包含done 和value属性的对象。ES6中可以通过Symbol.iterator 给对象设置默认的遍历器，无论什么时候对象需要被遍历，执行它的iterator方法便可以返回一个用于获取值的迭代器。数组默认就是一个迭代器： var arr = [11,12,13]; var itr = arr[Symbol.iterator](); itr.next(); // { value: 11, done: false } itr.next(); // { value: 12, done: false } itr.next(); // { value: 13, done: false } itr.next(); // { value: undefined, done: true } 你可以通过 Symbol.iterator 自定义一个对象的迭代器。 16. GeneratorsGenerator 函数是 ES6 的新特性，它允许一个函数返回的可遍历对象生成多个值。 在使用中你会看到 * 语法和一个新的关键词 yield: function *infiniteNumbers() { var n = 1; while (true){ yield n++; } } var numbers = infiniteNumbers(); // returns an iterable object numbers.next(); // { value: 1, done: false } numbers.next(); // { value: 2, done: false } numbers.next(); // { value: 3, done: false } 每次执行 yield 时，返回值变为迭代器的下一个值。 17. PromisesES6 对 Promise 有了原生的支持，一个 Promise 是一个等待被异步执行的对象，当它执行完成后，其状态会变成resolved 或者 rejected。 var p =new Promise(function(resolve, reject){ if(/* condition */){ resolve(/* value */) }else{ reject(/* reason */) } }) 每一个 Promise 都有一个 .then 方法，这个方法接受两个参数，第一个是处理 resolved 状态的回调，一个是处理 rejected 状态的回调： p.then((val) =&gt; console.log(&quot;Promise Resolved&quot;, val), (err) =&gt; console.log(&quot;Promise Rejected&quot;, err));","categories":[{"name":"随笔","slug":"随笔","permalink":"http://myappol.cn/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://myappol.cn/tags/随笔/"},{"name":"ES6","slug":"ES6","permalink":"http://myappol.cn/tags/ES6/"}]},{"title":"markdown语法总结","slug":"markdown语法总结","date":"2016-12-13T01:19:43.000Z","updated":"2016-12-13T02:23:35.000Z","comments":true,"path":"2016/12/13/markdown语法总结/","link":"","permalink":"http://myappol.cn/2016/12/13/markdown语法总结/","excerpt":"","text":"概述 Markdown 的目标是实现「易读易写」。 Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像强调。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 区块元素标题 Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1 ============= This is an H2 ------------- 任何数量的 = 和 - 都可以有效果。类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # 这是 H1 ## 这是 H2 ###### 这是 H6 区块引用 BlockquotesMarkdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse &gt; id sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： &gt; This is the first level of quoting. &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： &gt; ## 这是一个标题。 &gt; &gt; 1. 这是第一行列表项。 &gt; 2. 这是第二行列表项。 &gt; &gt; 给出一些例子代码： &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： * Red * Green * Blue 等同于： + Red + Green + Blue 也等同于： - Red - Green - Blue 有序列表则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish 如果要在列表项目内放进引用，那 &gt; 就需要缩进： * A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 代码区块和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown会用&lt;pre&gt;和&lt;code&gt;标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 这是一个普通段落： 这是一个代码区块。 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- 区段元素链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。不管是哪一种，链接文字都是用 [方括号] 来标记。 要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. 如果你是要链接到同样主机的资源，你可以使用相对路径： See my [About](/about/) page for details. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： [id]: http://example.com/ &quot;Optional Title Here&quot; 下面是一个参考式链接的范例： I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式写： I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 或 包围的字词会被转成用 标签包围，用两个 或 包起来的话，则会被转成 &lt;strong&gt;，例如： *single asterisks* _single underscores_ **double asterisks** __double underscores__ 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： Use the `printf()` function. 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： ``There is a literal backtick (`) here.`` 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 在代码区段内，&amp; 和尖括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： Please don&apos;t use any `&lt;blink&gt;` tags. 你也可以这样写： `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`. 图片很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。 Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。 参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： [id]: url/to/image &quot;Optional title attribute&quot; 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的&lt;img&gt;标签。 本地图片上传 登陆http://yotuku.cn/上传图片，点击markdown，粘贴到markdown文档即可","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2016-12-12T03:09:29.000Z","updated":"2016-12-12T03:09:29.000Z","comments":true,"path":"2016/12/12/hello-world/","link":"","permalink":"http://myappol.cn/2016/12/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}